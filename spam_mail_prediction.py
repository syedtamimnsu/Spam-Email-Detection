# -*- coding: utf-8 -*-
"""spam mail prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ry0NJpkEC9ObZRM-8zGIlqXmWyjBltuX

Importing dependelkncies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import  TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

#loading dataset to pandas data frame
raw_mail_data = pd.read_csv('/content/mail_data.csv')

raw_mail_data.head()

raw_mail_data.shape

#replace the null values with a null string
mail_data = raw_mail_data.where((pd.notnull(raw_mail_data)), '')

#checking number of null values
raw_mail_data.isnull().sum()

"""Label

spam --> 1

ham --> 0
"""

mail_data.loc[mail_data['Category'] == 'spam', 'Category',] = 0
mail_data.loc[mail_data['Category'] == 'ham', 'Category',] = 1

"""separating the daata as text and label"""

#separating the daata as text and label
x = mail_data['Message']
y = mail_data['Category']

print(x)

print(y)

"""Splitting data into train and test data"""

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=5)

print(x.shape, x_train.shape, x_train.shape)

"""Feature extraction"""

#transfrom the text data to feature vectors that can be used as inport to the Logistic regression
feature_extration = TfidfVectorizer(min_df=1, stop_words='english', lowercase=True)

x_train_features = feature_extration.fit_transform(x_train)
x_test_feature = feature_extration.transform(x_test)

#convert y_train and y_test values as integers
y_train = y_train.astype('int')
y_test = y_test.astype('int')

print(x_train)

print(x_test_feature)

"""Train Model

Logistic Regrassion
"""

model = LogisticRegression()

#training the Logistic Regression model with the training data
model.fit(x_train_features, y_train)

"""Evaluationg the training"""

#prediction on training data

prediction_on_training_data = model.predict(x_train_features)
accuracy_on_training_data = accuracy_score(y_train, prediction_on_training_data)

print('Accuracy on trainig data: ', accuracy_on_training_data)

#prediction on testing data

prediction_on_test_data = model.predict(x_test_feature)
accuracy_on_test_data = accuracy_score(y_test, prediction_on_test_data)

print('Accuracy on test data: ', accuracy_on_test_data)

"""Building a prediction system"""

input_mail = ["I've been searching for the right words to thank you for this breather. I promise i wont take your help for granted and will fulfil my promise. You have been wonderful and a blessing at all times"]

# convert text to feature vectors
# Correct the variable name from 'feature_extraction' to 'feature_extration'
input_data_features = feature_extration.transform(input_mail)

# making prediction

prediction = model.predict(input_data_features)
print(prediction)


if (prediction[0]==1):
  print('Ham mail')

else:
  print('Spam mail')